heat_template_version: 2015-10-15

description: |
  #### Production

  A single Linux server running the lastest stable version of
  [Jenkins CI](http://jenkins-ci.org/content/about-jenkins-ci) Server,
  with up to 10 optional worker nodes (connected via Swarm).

parameter_groups:
- label: rax-dev-params
  parameters:
  - server_image
  - secondary_template
  - ansible_branch
  - ansible_repo

parameters:
  jenkins_email:
    type: string
    default: admin@example.com
    label: Jenkins Admin E-mail
    description: E-mail Address for Jenkins Admin User
  #Advanced Options
  flavor:
    type: string
    default: 4 GB General Purpose v1
    label: Server Flavor
    description: Flavor of Cloud Server to use for Jenkins
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
  slave_flavor:
    type: string
    default: 4 GB General Purpose v1
    label: Server Flavor
    description: Flavor of Cloud Server to use for Jenkins Workers
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
  server_image:
   type: string
   default: f4bbbce2-50b0-4b07-bf09-96c175a45f4b
   label: Server Image
   description: Image to use for Jenkins
   constraints:
   - allowed_values:
     - f4bbbce2-50b0-4b07-bf09-96c175a45f4b
  server_count:
    type: number
    default: 0
    label: Number of Secondary Servers
    description: Number of secondary worker nodes
    constraints:
      - range: { min: 0, max: 10 }
  secondary_template:
    type: string
    default: https://raw.githubusercontent.com/rackspace-orchestration-templates/jenkins-small/stable/jenkins-small-secondary.yaml
    label: Secondary Template
    description: Template to use for secondary servers
  ansible_branch:
    type: string
    default: stable
    label: Git Branch or Tag for Ansible Roles
    description: The Ansible Roles will be pulled from Git, using the tag or branch provided
  ansible_repo:
    type: string
    default: https://github.com/rackspace-orchestration-templates/ansible-roles.git
    label: Git Repo for Ansible Roles
    description: The Ansible Roles will be pulled from Git, using the repo provided
resources:
  #SSH Key
  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true
  #Software Configurations
  upload_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            git clone -b 'tag' --single-branch --progress repository /etc/ansible/roles > $heat_outputs_path.results 2>&1
          params:
            tag: { get_param: ansible_branch}
            repository: { get_param: ansible_repo }
  jenkins_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      config: |
        ---
        - name: Install and configure Jenkins
          hosts: localhost
          connection: local
          roles:
          - common
          - jenkins
  other_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - default: "[]"
        name: firewall_nodes
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_node_rules
        type: CommaDelimitedList
      - default: "[]"
        name: lsync_servers
        type: CommaDelimitedList
      config: |
        ---
        - name: Install and configure Lsyncd
          hosts: localhost
          connection: local
          roles:
          - firewall
  deploy_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: upload_role_config
      server:
        get_resource: jenkins_server
  deploy_jenkins:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        tz: "America/Chicago"
        jenkins_role: 'master'
        jenkins_port: '8080'
        jenkins_ip: { get_attr: [jenkins_server, accessIPv4] }
      config:
        get_resource: jenkins_config
      server:
        get_resource: jenkins_server
  deploy_other:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_jenkins
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        firewall_global_rules: [ "0.0.0.0,0,22,tcp", "0.0.0.0,0,8080,tcp"]
        firewall_nodes: { get_attr: [jenkins_secondary, public_ip] }
        firewall_node_rules: []
      config:
        get_resource: other_config
      server:
        get_resource: jenkins_server
  #Master Server
  jenkins_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: "OS::stack_name" }
      image: { get_param: server_image }
      flavor: { get_param: flavor }
      key_name: { get_resource: ssh_key }
      software_config_transport: POLL_TEMP_URL
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        build_config: "backup_agent_only,monitoring_defaults"
  #Cloud Backup
  jenkins_backup:
    type: Rackspace::Cloud::BackupConfig
    depends_on: jenkins_server
    properties:
      host_ip_address: { get_attr: [jenkins_server, accessIPv4] }
      BackupConfigurationName:
        str_replace:
          template: stack Weekly Backup
          params:
            stack: { get_param: "OS::stack_name" }
      Inclusions:
      - FilePath: "/var/lib/jenkins"
        FileItemType: "Folder"
      NotifyFailure: true
      NotifyRecipients: { get_param: jenkins_email }
      TimeZoneId: Central Standard Time
      StartTimeAmPm: AM
      StartTimeHour: 1
      StartTimeMinute: 0
      HourInterval: null
      DayOfWeekId: 0
      Frequency: "Weekly"
      VersionRetention: 30
  #Secondary Server
  jenkins_secondary:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: server_count }
      resource_def:
        type: { get_param: secondary_template }
        properties:
          ssh_key: { get_resource: ssh_key }
          parent_stack_id: { get_param: "OS::stack_id" }
          server_image: { get_param: server_image }
          server_flavor: { get_param: slave_flavor }
          server_name:
            str_replace:
              template: stack-secondary-%index%
              params:
                stack: { get_param: "OS::stack_name" }
          master_server: { get_attr: [jenkins_server, accessIPv4] }
          ansible_branch: { get_param: ansible_branch}
          ansible_repo: { get_param: ansible_repo }

outputs:
  jenkins_public_ip:
    description: Jenkins Public IP
    value:
      get_attr: [jenkins_server, accessIPv4]
  jenkins_public_url:
    description: Jenkins Public URL
    value:
      str_replace:
        template: "http://domain:port/"
        params:
          domain: { get_attr: [jenkins_server, accessIPv4] }
          port: { get_param: jenkins_port }
  ssh_private_key:
    description: SSH Private Key
    value:
      get_attr: [ssh_key, private_key]
  secondary_ips:
    description: Secondary Node IPs
    value:
      get_attr: [jenkins_secondary, public_ip]
